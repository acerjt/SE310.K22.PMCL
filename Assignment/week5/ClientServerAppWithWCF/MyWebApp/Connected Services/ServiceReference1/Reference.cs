//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyWebApp.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Book", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Book : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BookIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float BookPriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BookQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BookTitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BookID {
            get {
                return this.BookIDField;
            }
            set {
                if ((this.BookIDField.Equals(value) != true)) {
                    this.BookIDField = value;
                    this.RaisePropertyChanged("BookID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float BookPrice {
            get {
                return this.BookPriceField;
            }
            set {
                if ((this.BookPriceField.Equals(value) != true)) {
                    this.BookPriceField = value;
                    this.RaisePropertyChanged("BookPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BookQuantity {
            get {
                return this.BookQuantityField;
            }
            set {
                if ((this.BookQuantityField.Equals(value) != true)) {
                    this.BookQuantityField = value;
                    this.RaisePropertyChanged("BookQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BookTitle {
            get {
                return this.BookTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.BookTitleField, value) != true)) {
                    this.BookTitleField = value;
                    this.RaisePropertyChanged("BookTitle");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBooks", ReplyAction="http://tempuri.org/IService/GetAllBooksResponse")]
        MyWebApp.ServiceReference1.Book[] GetAllBooks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllBooks", ReplyAction="http://tempuri.org/IService/GetAllBooksResponse")]
        System.Threading.Tasks.Task<MyWebApp.ServiceReference1.Book[]> GetAllBooksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddBook", ReplyAction="http://tempuri.org/IService/AddBookResponse")]
        void AddBook(MyWebApp.ServiceReference1.Book book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddBook", ReplyAction="http://tempuri.org/IService/AddBookResponse")]
        System.Threading.Tasks.Task AddBookAsync(MyWebApp.ServiceReference1.Book book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateBook", ReplyAction="http://tempuri.org/IService/UpdateBookResponse")]
        void UpdateBook(MyWebApp.ServiceReference1.Book book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateBook", ReplyAction="http://tempuri.org/IService/UpdateBookResponse")]
        System.Threading.Tasks.Task UpdateBookAsync(MyWebApp.ServiceReference1.Book book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteBook", ReplyAction="http://tempuri.org/IService/DeleteBookResponse")]
        void DeleteBook(MyWebApp.ServiceReference1.Book book);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteBook", ReplyAction="http://tempuri.org/IService/DeleteBookResponse")]
        System.Threading.Tasks.Task DeleteBookAsync(MyWebApp.ServiceReference1.Book book);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : MyWebApp.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<MyWebApp.ServiceReference1.IService>, MyWebApp.ServiceReference1.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MyWebApp.ServiceReference1.Book[] GetAllBooks() {
            return base.Channel.GetAllBooks();
        }
        
        public System.Threading.Tasks.Task<MyWebApp.ServiceReference1.Book[]> GetAllBooksAsync() {
            return base.Channel.GetAllBooksAsync();
        }
        
        public void AddBook(MyWebApp.ServiceReference1.Book book) {
            base.Channel.AddBook(book);
        }
        
        public System.Threading.Tasks.Task AddBookAsync(MyWebApp.ServiceReference1.Book book) {
            return base.Channel.AddBookAsync(book);
        }
        
        public void UpdateBook(MyWebApp.ServiceReference1.Book book) {
            base.Channel.UpdateBook(book);
        }
        
        public System.Threading.Tasks.Task UpdateBookAsync(MyWebApp.ServiceReference1.Book book) {
            return base.Channel.UpdateBookAsync(book);
        }
        
        public void DeleteBook(MyWebApp.ServiceReference1.Book book) {
            base.Channel.DeleteBook(book);
        }
        
        public System.Threading.Tasks.Task DeleteBookAsync(MyWebApp.ServiceReference1.Book book) {
            return base.Channel.DeleteBookAsync(book);
        }
    }
}
